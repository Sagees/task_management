package simulationEnvironment;

import distribution.*;
import lowMemoryKiller.*;

public class Main {

	public static final int RUNS = 30;
	public static final String BASE_DIR = "/Users/hyunjioh/cs_grad/LMKSimulation/traces";

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		Main.testKillerWithTrace(2, 100, 133);
	}
	
	protected static void testKillerWithTrace(int size, int startID, int endID){
		for (int i = startID; i <= endID; i++) {
			String filename = String.format("%s/trace%d.txt", Main.BASE_DIR, i);

			RandomUtility.initialize(i);
			Trace trace = Trace.readTraceFromFile(filename);
			System.out.printf("%d, %d, %d, %d, ", i, trace.getNumberOfApps(),
					trace.getLastTime() / 8640, trace.getLaunches());
			DeviceWithTrace device = new DeviceWithTrace(trace, size);
			IKiller killer = new AndroidLMKiller(device);
			SimulationResult result = device.Simulate();
			Main.outputResult(result);

			RandomUtility.initialize(i);
			trace = Trace.readTraceFromFile(filename);
			device = new DeviceWithTrace(trace, size);
			killer = new AndroidKillerMixingServices(device);
			result = device.Simulate();
			Main.outputResult(result);

			RandomUtility.initialize(i);
			trace = Trace.readTraceFromFile(filename);
			device = new DeviceWithTrace(trace, size);
			killer = new LRUKiller(device);
			result = device.Simulate();
			Main.outputResult(result);

			RandomUtility.initialize(i);
			trace = Trace.readTraceFromFile(filename);
			device = new DeviceWithTrace(trace, size);
			killer = new SimplifiedRLKiller(device);
			if (size == 1) {
				((RLKiller) killer).setThreshold(SimulationConstants.RL_KILLER_THRESHOLD_1G);
			} else {
				((RLKiller) killer).setThreshold(SimulationConstants.RL_KILLER_TREESHOLD_2G);
			}
			result = device.Simulate();
			Main.outputResult(result);
			
			RandomUtility.initialize(i);
			trace = Trace.readTraceFromFile(filename);
			device = new DeviceWithTrace(trace, size);
			killer = new RLKiller(device);
			if (size == 1) {
				((RLKiller) killer).setThreshold(SimulationConstants.RL_KILLER_THRESHOLD_1G);
			} else {
				((RLKiller) killer).setThreshold(SimulationConstants.RL_KILLER_TREESHOLD_2G);
			}
			result = device.Simulate();
			Main.outputResult(result);

			System.out.println();
		}
	} 


	protected static void outputResult(SimulationResult result) {
		System.out.printf("%.4f, %d, ", 
				result.getAccumulatedLaunchLatency() / result.getLaunches(),
				result.getRelaunches());
	}
}
